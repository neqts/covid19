{"version":3,"sources":["components/Loading.jsx","components/CovidMap.jsx","entities/LegendItem.js","entities/LegendItems.js","tasks/LoadCountriesTasks.js","components/Legend.jsx","components/Covid19.jsx","App.js","reportWebVitals.js","index.js"],"names":["Loading","style","height","display","justifyContent","alignItems","className","role","class","CovidMap","countries","MapContainer","zoom","center","GeoJSON","fillColor","weight","color","fillOpacity","data","onEachFeature","country","layer","options","properties","name","ADMIN","confirmedText","bindPopup","LegendItem","title","isFor","textColor","this","legendItems","cases","LoadCountryTask","covidUrl","setState","load","papa","parse","download","header","complete","result","covidCountries","i","features","covidCountry","find","ISO_A3","ISO3","confirmed","Number","Confirmed","length","legendItem","item","number","toString","replace","Legend","console","log","map","backgroundColor","flex","fontWeight","fontSize","Covid19","useState","setCountries","legendItemsReverse","reverse","useEffect","LoadCountriesTask","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+wi4oBAiBeA,EAfC,WACZ,OACA,sBAAKC,MAAO,CAACC,OAAO,QAAQC,QAAQ,OAAQC,eAAe,SAASC,WAAW,UAA/E,UACJ,qBAAKC,UAAU,2BAA2BC,KAAK,SAA/C,SACE,sBAAMD,UAAU,sBAElB,qBAAKE,MAAM,yBAAyBD,KAAK,SAAzC,SACE,sBAAMC,MAAM,sBAEd,qBAAKA,MAAM,4BAA4BD,KAAK,SAA5C,SACE,sBAAMC,MAAM,0B,gBCkBCC,G,YA1BE,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAelB,OACE,cAACC,EAAA,EAAD,CAAcV,MAAO,CAAEC,OAAQ,QAAUU,KAAM,EAAGC,OAAQ,CAAC,GAAI,IAA/D,SACE,cAACC,EAAA,EAAD,CACEb,MAjBW,CACfc,UAAW,QACXC,OAAQ,EACRC,MAAO,QACPC,YAAa,GAcTC,KAAMT,EACNU,cAZgB,SAACC,EAASC,GAC9BA,EAAMC,QAAQR,UAAYM,EAAQG,WAAWP,MAC7C,IAAMQ,EAAOJ,EAAQG,WAAWE,MAC1BC,EAAgBN,EAAQG,WAAWG,cACzCL,EAAMM,UAAN,UAAmBH,EAAnB,YAA2BE,W,wCCPdE,EARb,WAAYC,EAAOb,EAAOc,EAAOC,GAAY,oBAC3CC,KAAKH,MAAQA,EACbG,KAAKhB,MAAQA,EACbgB,KAAKF,MAAQA,EACbE,KAAKD,UAAgCA,GCiC5BE,EApCG,CAChB,IAAIL,EACF,cACA,WACA,SAACM,GAAD,OAAWA,GAAS,MACpB,SAGF,IAAIN,EACF,oBACA,WACA,SAACM,GAAD,OAAWA,GAAS,KAAWA,EAAQ,MACvC,SAGF,IAAIN,EACF,oBACA,WACA,SAACM,GAAD,OAAWA,GAAS,KAAWA,EAAQ,OAGzC,IAAIN,EACF,mBACA,WACA,SAACM,GAAD,OAAWA,GAAS,KAAUA,EAAQ,OAGxC,IAAIN,EACF,aACA,WACA,SAACM,GAAD,OAAWA,EAAQ,GAAKA,EAAQ,OAGlC,IAAIN,EAAW,UAAW,WAAW,SAACM,GAAD,OAAW,M,mHCuBnCC,E,iDApDbC,SACE,4F,KAEFC,SAAW,K,KAEXC,KAAO,SAACD,GACN,EAAKA,SAAWA,EAEhBE,IAAKC,MAAM,EAAKJ,SAAU,CACxBK,UAAU,EACVC,QAAQ,EACRC,SAAU,SAACC,GAAD,mBAAY,EAAZ,MAAmCA,EAAO1B,U,gDAIpC,SAAC2B,GACnB,IADuC,IAAD,WAC7BC,GACP,IAAM1B,EAAU2B,IAASD,GAEnBE,EAAeH,EAAeI,MAClC,SAACD,GAAD,OAAkB5B,EAAQG,WAAW2B,SAAWF,EAAaG,QAM/D,GAHA/B,EAAQG,WAAW6B,UAAY,EAC/BhC,EAAQG,WAAWG,cAAgB,EAEf,MAAhBsB,EAAsB,CACxB,IAAII,EAAYC,OAAOL,EAAaM,WACpClC,EAAQG,WAAW6B,UAAYA,EAC/BhC,EAAQG,WAAWG,cAAnB,YAAmC,EAAnC,MACE0B,GAGJ,cAAI,GAAJ,GAAsBhC,IAjBf0B,EAAI,EAAGA,EAAIC,IAASQ,OAAQT,IAAM,EAAlCA,GAoBT,EAAKT,SAASU,Q,gDAGG,SAAC3B,GAClB,IAAMoC,EAAavB,EAAYgB,MAAK,SAACQ,GAAD,OAClCA,EAAK3B,MAAMV,EAAQG,WAAW6B,cAGd,MAAdI,IAAoBpC,EAAQG,WAAWP,MAAQwC,EAAWxC,U,gDAGtC,SAAC0C,GACzB,OAAOA,EAAOC,WAAWC,QAAQ,wBAAyB,SCtB/CC,EA9BA,SAAC,GAAmB,IAAlB5B,EAAiB,EAAjBA,YAEb,OADA6B,QAAQC,IAAI9B,GAEX,qBAAKjC,MAAO,CACRE,QAAQ,OACRE,WAAW,WAFf,SAQI6B,EAAY+B,KAAI,SAACP,GAAD,OACb,qBACiBzD,MAAO,CACpBiE,gBAAgBR,EAAKzC,MACrBkD,KAAK,EACLhE,QAAQ,OACRE,WAAW,SACXD,eAAe,SACfa,MAAMyC,EAAK1B,UACX9B,OAAO,OACPkE,WAAW,SACXC,SAAS,SAVb,SAYG,+BAAOX,EAAK5B,SAXV4B,EAAK5B,aCoBPwC,EA3BC,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACb7D,EADa,KACF8D,EADE,KAGdC,EAAqB,YAAIvC,GAAawC,UAU5C,OAFAC,qBANa,WACXZ,QAAQC,IAAI,SACc,IAAIY,GACZrC,MAAK,SAAC7B,GAAD,OAAe8D,EAAa9D,QAGrC,IAGd,8BACwB,IAArBA,EAAU8C,OACT,cAAC,EAAD,IAEA,gCACE,cAAC,EAAD,CAAU9C,UAAWA,IACrB,cAAC,EAAD,CAAQwB,YAAauC,UCnBhBI,MANf,WACE,OACC,cAAC,EAAD,KCOYC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ee044fc2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Loading = () => {\r\n    return ( \r\n    <div style={{height:\"100vh\",display:\"flex\", justifyContent:\"center\",alignItems:\"center\"}}>\r\n<div className=\"spinner-grow text-danger\" role=\"status\">\r\n  <span className=\"visually-hidden\"></span>\r\n</div>\r\n<div class=\"spinner-grow text-info\" role=\"status\">\r\n  <span class=\"visually-hidden\"></span>\r\n</div>\r\n<div class=\"spinner-grow text-warning\" role=\"status\">\r\n  <span class=\"visually-hidden\"></span>\r\n</div>\r\n    </div> );\r\n}\r\n \r\nexport default Loading;","import React from \"react\";\r\nimport { GeoJSON, MapContainer } from \"react-leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"./CovidMap.css\";\r\nconst CovidMap = ({ countries }) => {\r\n  const mapStyle = {\r\n    fillColor: \"white\",\r\n    weight: 1,\r\n    color: \"black\",\r\n    fillOpacity: 1,\r\n  };\r\n\r\n  const onEachCountry = (country, layer) => {\r\n    layer.options.fillColor = country.properties.color;\r\n    const name = country.properties.ADMIN;\r\n    const confirmedText = country.properties.confirmedText;\r\n    layer.bindPopup(`${name} ${confirmedText}`);\r\n  };\r\n\r\n  return (\r\n    <MapContainer style={{ height: \"90vh\" }} zoom={2} center={[20, 60]}>\r\n      <GeoJSON\r\n        style={mapStyle}\r\n        data={countries}\r\n        onEachFeature={onEachCountry}\r\n      />\r\n    </MapContainer>\r\n  );\r\n};\r\n\r\nexport default CovidMap;\r\n","class LegendItem {\r\n    constructor(title, color, isFor, textColor) {\r\n      this.title = title;\r\n      this.color = color;\r\n      this.isFor = isFor;\r\n      this.textColor = textColor != null ? textColor : textColor;\r\n    }\r\n  }\r\n  \r\n  export default LegendItem;","import LegendItem from \"../entities/LegendItem\";\r\n\r\nvar legendItems = [\r\n  new LegendItem(\r\n    \"1,000,000 +\",\r\n    \"#741f1f\",\r\n    (cases) => cases >= 1_000_000,\r\n    \"white\"\r\n  ),\r\n\r\n  new LegendItem(\r\n    \"500,000 - 999,999\",\r\n    \"#9c2929\",\r\n    (cases) => cases >= 500_000 && cases < 1_000_000,\r\n    \"White\"\r\n  ),\r\n\r\n  new LegendItem(\r\n    \"200,000 - 499,999\",\r\n    \"#c57f7f\",\r\n    (cases) => cases >= 200_000 && cases < 500_000\r\n  ),\r\n\r\n  new LegendItem(\r\n    \"50,000 - 199,999\",\r\n    \"#d8aaaa\",\r\n    (cases) => cases >= 50_000 && cases < 200_000\r\n  ),\r\n\r\n  new LegendItem(\r\n    \"0 - 49,999\",\r\n    \"#ebd4d4\",\r\n    (cases) => cases > 0 && cases < 50_000\r\n  ),\r\n\r\n  new LegendItem(\"No Data\", \"#ffffff\", (cases) => true),\r\n];\r\n\r\nexport default legendItems;","import papa from \"papaparse\";\r\nimport legendItems from \"../entities/LegendItems\";\r\nimport { features } from \"../data/countries.json\";\r\n//    this.setState(features);\r\n\r\nclass LoadCountryTask {\r\n  covidUrl =\r\n    \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/web-data/data/cases_country.csv\";\r\n\r\n  setState = null;\r\n\r\n  load = (setState) => {\r\n    this.setState = setState;\r\n\r\n    papa.parse(this.covidUrl, {\r\n      download: true,\r\n      header: true,\r\n      complete: (result) => this.#processCovidData(result.data),\r\n    });\r\n  };\r\n\r\n  #processCovidData = (covidCountries) => {\r\n    for (let i = 0; i < features.length; i++) {\r\n      const country = features[i];\r\n      //console.log(country);\r\n      const covidCountry = covidCountries.find(\r\n        (covidCountry) => country.properties.ISO_A3 === covidCountry.ISO3\r\n      );\r\n\r\n      country.properties.confirmed = 0;\r\n      country.properties.confirmedText = 0;\r\n\r\n      if (covidCountry != null) {\r\n        let confirmed = Number(covidCountry.Confirmed);\r\n        country.properties.confirmed = confirmed;\r\n        country.properties.confirmedText = this.#formatNumberWithCommas(\r\n          confirmed\r\n        );\r\n      }\r\n      this.#setCountryColor(country);\r\n    }\r\n\r\n    this.setState(features);\r\n  };\r\n\r\n  #setCountryColor = (country) => {\r\n    const legendItem = legendItems.find((item) =>\r\n      item.isFor(country.properties.confirmed)\r\n    );\r\n\r\n    if (legendItem != null) country.properties.color = legendItem.color;\r\n  };\r\n\r\n  #formatNumberWithCommas = (number) => {\r\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  };\r\n}\r\n\r\nexport default LoadCountryTask;\r\n","import React from 'react';\r\n\r\nconst Legend = ({legendItems}) => {\r\n    console.log(legendItems);\r\n    return ( \r\n     <div style={{\r\n         display:\"flex\",\r\n         alignItems:\"stretch\",\r\n\r\n     }}\r\n     \r\n     >\r\n        \r\n        {legendItems.map((item) => (\r\n            <div\r\n            key={item.title} style={{\r\n                backgroundColor:item.color,\r\n                flex:1,\r\n                display:\"flex\",\r\n                alignItems:\"center\",\r\n                justifyContent:\"center\",\r\n                color:item.textColor,\r\n                height:\"10vh\",\r\n                fontWeight:\"bolder\",\r\n                fontSize:\"1.5em\"\r\n\r\n            }}><span>{item.title}</span></div>\r\n        ))}\r\n     </div>\r\n     );\r\n}\r\n \r\nexport default Legend;","import React, { useState, useEffect } from \"react\";\r\n\r\nimport Loading from \"./Loading\";\r\nimport CovidMap from \"./CovidMap\";\r\nimport LoadCountriesTask from \"../tasks/LoadCountriesTasks\";\r\nimport Legend from \"./Legend\";\r\nimport legendItems from \"../entities/LegendItems\";\r\n\r\nconst Covid19 = () => {\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  const legendItemsReverse = [...legendItems].reverse();\r\n\r\n  const load = () => {\r\n    console.log(\"load\");\r\n    const loadCountriesTask = new LoadCountriesTask();\r\n    loadCountriesTask.load((countries) => setCountries(countries));\r\n  };\r\n\r\n  useEffect(load, []);\r\n\r\n  return (\r\n    <div>\r\n      {countries.length === 0 ? (\r\n        <Loading />\r\n      ) : (\r\n        <div>\r\n          <CovidMap countries={countries} />\r\n          <Legend legendItems={legendItemsReverse} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Covid19;\r\n","import React from 'react';\nimport Covid19 from './components/Covid19'\n\nfunction App() {\n  return (\n   <Covid19 />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}